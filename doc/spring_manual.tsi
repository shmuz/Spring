<header>
tag=SMZ1
ver=2.7
</header>
<node>
id=1
lv=0
dt=Text
nm=Spring
ctime=3551829092
mtime=3553190368
<article>
#_<markdown>
#_
#_**Spring** - это модификация Фар 3, в которой вместо встроенного макроязыка
#_используется скриптовый язык Lua 5.1.
#_
#_Под макросом понимается Lua-скрипт и его мета-данные, такие как:
#_
#_* Область начала исполнения скрипта.
#_* Клавиша, инициирующая исполнение скрипта из данной области.
#_* Предварительные условия для исполнения скрипта.
#_* Флаги времени исполнения: DisableOutput и NoSendKeysToPlugins.
#_
#_Текущее состояние проекта
#_==========================
#_
#_Что работает
#_-------------
#_* Импорт макросов посредством команды `far /import`.
#_* Запись макросов через `Ctrl.` или `CtrlShift.`.
#_* Макросы могут использовать функции и библиотеки Lua и LuaFAR.
#_* API `MacroControl` для плагинов: все операции, кроме `MCTL_GETLASTERROR`.
#_
#_Что не работает
#_----------------
#_* Не все функции макроязыка реализованы, см. список нереализованных функций
#_  в данном мануале.
#_
</article>
</node>
<node>
id=19
lv=1
dt=Text
nm=Свойства и функции: по областям
ctime=3552220773
mtime=3552220773
<article>
</article>
</node>
<node>
id=20
lv=2
dt=Text
nm=Общие
ctime=3552221109
mtime=3552221109
<article>
</article>
</node>
<node>
id=9
lv=3
dt=Text
nm=AKey
ctime=3551992029
mtime=3552331443
<article>
#_**AKey:** string
#_
#_**Описание:**
#_  Ключ, запустивший данный макрос на исполнение.
#_
</article>
</node>
<node>
id=36
lv=3
dt=Text
nm=Area
ctime=3552736839
mtime=3553190545
<article>
#_**Area**: таблица со следующими полями:
#_
#_  Current:               string
#_  Other:                 boolean
#_  Shell:                 boolean
#_  Viewer:                boolean
#_  Editor:                boolean
#_  Dialog:                boolean
#_  Search:                boolean
#_  Disks:                 boolean
#_  MainMenu:              boolean
#_  Menu:                  boolean
#_  Help:                  boolean
#_  Info:                  boolean
#_  QView:                 boolean
#_  Tree:                  boolean
#_  FindFolder:            boolean
#_  UserMenu:              boolean
#_  ShellAutoCompletion:   boolean
#_  DialogAutoCompletion:  boolean
#_
</article>
</node>
<node>
id=4
lv=3
dt=Text
nm=Keys
ctime=3551902602
mtime=3553118704
<article>
#_Keys (str)
#_
#_**Параметры:**
#_  str: string
#_
#_**Возвращает:**
#_  ничего
#_
#_**Описание:**
#_  Послать один или более ключей Фару.
#_
#_**Примечание:**
#_  Если скрипт создаёт корутины, не следует вызывать данную функцию из них.
#_
#_**Пример:**
#_  Keys("A b CtrlC ShiftEnter")
#_
</article>
</node>
<node>
id=15
lv=3
dt=Text
nm=mdelete
ctime=3552066075
mtime=3552331539
<article>
#_mdelete (key, name)
#_
#_**Параметры:**
#_  key:  string
#_  name: string
#_
#_**Возвращает:**
#_  ничего
#_
#_**Описание:**
#_  Функция *mdelete* удаляет значение или ключ из базы данных.
#_  Для удаления ключа следует указать параметр *name* == `"*"` (звёздочку).
#_
</article>
</node>
<node>
id=13
lv=3
dt=Text
nm=mload
ctime=3551993209
mtime=3552331561
<article>
#_ret = mload (key, name)
#_
#_**Параметры:**
#_  key:   string
#_  name:  string
#_
#_**Возвращает:**
#_  ret:   number, string, boolean, table или nil.
#_
#_**Описание:**
#_  Функция *mload* читает значение из базы данных.
#_
#_
</article>
</node>
<node>
id=12
lv=3
dt=Text
nm=msave
ctime=3551993205
mtime=3552332698
<article>
#_msave (key, name, value)
#_
#_**Параметры:**
#_  key:         string
#_  name:        string
#_  value:       number, string, boolean или table
#_
#_**Возвращает:**
#_  ничего
#_
#_**Описание:**
#_  Функция *msave* сохраняет переданное значение в базу данных.
#_  При сохранении таблиц будут сохраняться только ключи и значения
#_  типов: number, string, boolean.
#_
#_
</article>
</node>
<node>
id=38
lv=1
dt=Text
nm=Изменения API в сравнении с макроязыком
ctime=3553185939
mtime=3553190719
<article>
#_<markdown>
#_
#_* Большинство функций находятся в таблице `mf` (от *macrofunctions*), например: `mf.abs`, `mf.fsplit` и т.д.
#_* Глобальные функции: `Keys`, `mdelete`, `mload`, `msave`, `msgbox`, `print`, `prompt`.
#_* Функции `mload` и `msave` изменились, см. их описание.
#_* Свойства, зависящие от контекста исполнения, находятся в таблице `Object`, например: `Object.CurPos`, `Object.Empty`.
#_* Логические свойства проверки области исполнения находятся в таблице `Area`, например: `Area.Editor`, `Area.Shell`.
#_* `MacroArea -> Area.Current`.
#_* `Dialog.Autocompletion -> Area.DialogAutocompletion`
#_* `Shell.Autocompletion  -> Area.ShellAutocompletion`
#_* `Dlg.Info.Id -> Dlg.Id`
#_* `Dlg.Info.Owner -> Dlg.Owner`
#_* `Menu.Info.Id -> Menu.Id`
#_* `Far.Cfg.Get -> Far.Cfg_Get`
#_* `FullScreenMode -> Far.FullScreenMode`
#_* `IsUserAdmin -> Far.IsUserAdmin`
</article>
</node>
<node>
id=37
lv=1
dt=Text
nm=Список нереализованных функций
ctime=3553185283
mtime=3553186798
<article>
#_<markdown>
#_На текущий момент не реализованы следующие функции макроязыка:
#_
#_1. `Akey`
#_1. `BM.Add`
#_1. `BM.Clear`
#_1. `BM.Del`
#_1. `BM.Get`
#_1. `BM.Goto`
#_1. `BM.Next`
#_1. `BM.Pop`
#_1. `BM.Prev`
#_1. `BM.Back`
#_1. `BM.Push`
#_1. `BM.Stat`
#_1. `CallPlugin`
#_1. `CheckHotkey`
#_1. `Eval`
#_1. `GetHotkey`
#_1. `History.Disable`
#_1. `Iif`
#_1. `Macro.Const`
#_1. `Macro.Func`
#_1. `Macro.Keyword`
#_1. `Macro.Var`
#_1. `Menu.Filter`
#_1. `Menu.FilterStr`
#_1. `Menu.GetValue`
#_1. `Menu.ItemStatus`
#_1. `Menu.Select`
#_1. `MMode`
#_1. `Plugin.Call`
#_1. `Plugin.Command`
#_1. `Plugin.Config`
#_1. `Plugin.Menu`
#_1. `Prompt`
#_
</article>
</node>
<node>
id=5
lv=1
dt=Text
nm=Разное
ctime=3551990771
mtime=3551990771
<article>
</article>
</node>
<node>
id=2
lv=2
dt=Text
nm=Макросы, начинающиеся с @
ctime=3551901528
mtime=3552332009
<article>
#_<markdown>
#_Если макропоследовательность начинается с символа `@`, то последующая её часть интерпретируется как имя файла, содержащего скрипт.
#_
#_Переменные окружения расширяются.
#_
#_Такие макросы легче отлаживать и модифицировать, так как не требуется их перезагрузка в базу данных.
#_
#_**Пример:** `@%FARHOME%\macros\editor\shift.lua`
#_
</article>
</node>
<node>
id=14
lv=2
dt=Text
nm=Переменные
ctime=3552028510
mtime=3552848386
<article>
#_<markdown>
#_* Скрипт может устанавливать "временные" глобальные переменные, значения которых будут сохраняться только в течение времени исполнения скрипта.
#_      Пример: var = 15
#_
#_* Для установки "постоянных" глобальных переменных, значения которых будут сохраняться в течение всей сессии Фара и будут доступны всем скриптам, нужно использовать таблицу `_G`.
#_      Пример: _G.var = 15
#_
#_* При чтении несуществующей "временной" переменной, прочтётся одноимённая "постоянная" переменная (наследование в некотором смысле).
#_      Пример:
#_        var = 5
#_        _G.var = 10
#_        far.Message(var) --> 5
#_        var = nil
#_        far.Message(var) --> 10
#_
#_
</article>
</node>
<node>
id=3
lv=2
dt=Text
nm=Макросы без действия
ctime=3551902073
mtime=3552332235
<article>
#_<markdown>
#_Иногда нужно отменить действие какой-либо клавиши (например F2 в редакторе), не выполняя при этом никакого другого действия. Это можно сделать, назначив данной клавише макрос, состоящий только из комментария `--` (два минуса).
</article>
</node>
<node>
id=7
lv=2
dt=Text
nm=Плагин Luamacro
ctime=3551991405
mtime=3552030311
<article>
#_@@@
#_<markdown>
#_Описание работы плагина
#_
#_* Приспособить для плагина ф-цию OpenW, ввести особые значение для параметра
#_  OpenFrom: OPEN_MACROINIT=100, OPEN_MACROSTEP=101, OPEN_MACROFINAL=102.
#_
#_* Ф-ция OpenW получает от Фара:
#_    OPEN_MACROINIT:
#_      Аргументы передаются как в OPEN_FROMMACRO.
#_      1. Text  : FMVT_STRING; если начинается с L'@', то остаток - имя файла,
#_                 иначе - собственно текст скрипта (альтернативно - можно было бы
#_                 добавить бит во Flags ("код" или "имя файла")
#_      2. AKey  : FMVT_STRING (optional)
#_      3. Flags : FMVT_INTEGER (optional)
#_    OPEN_MACROSTEP:
#_      1. Handle
#_    OPEN_MACROFINAL:
#_      1. Handle
#_    OPEN_MACROPARSE:
#_      1. Text (те же правила, что для аргумента 1 в OPEN_MACROINIT).
#_
#_* Ф-ция OpenW возвращает Фару:
#_    OPEN_MACROINIT:
#_      скрипт успешно скомпилирован         : handle
#_      ошибка открытия файла или компиляции : NULL
#_
#_    OPEN_MACROSTEP:
#_      скрипт завершён без ошибок           : указатель на L""
#_      передана клавиша                     : указатель на текст клавиши в UTF-16
#_                                             (валидный до следующего вызова)
#_      ошибка исполнения                    : NULL
#_      нет такого хэндла или уже выгружен   : NULL
#_
#_    OPEN_MACROFINAL:
#_      скрипт выгружен                      : не NULL
#_      нет такого хэндла или уже выгружен   : NULL
#_
#_    OPEN_MACROPARSE:
#_      успешная компиляция                  : NULL
#_      ошибка компиляции                    : указатель на текст ошибки в UTF-16
#_                                             (валидный до следующего вызова)
#_
#_* Если текст макроса начинается с символа '@', то его последующая часть
#_  рассматривается как имя файла, содержащего скрипт. В имени файла
#_  поддерживаются переменные окружения, например '%FARHOME%'.
#_    
#_  TODO 1:
#_    Не организовать ли здесь поиск файла по шаблону, как это сделано в LUA_PATH
#_    & co.
#_    -- с кэшированием ?
#_    -- с шаблоном по умолчанию ?
#_
#_================================================================================
#_
</article>
</node>
<node>
id=29
lv=1
dt=Text
nm=Примеры
ctime=3552222267
mtime=3552222267
<article>
</article>
</node>
<node>
id=30
lv=2
dt=Text
nm=Выделить файлы новее текущего
ctime=3552222560
mtime=3553184334
<article>
#_<markdown>
#_```
#_-- Выделить в активной панели все файлы/папки новее текущего,
#_-- используя API плагинов (LuaFAR).
#_
#_local info = panel.GetPanelInfo(nil,1)
#_local curItem = panel.GetCurrentPanelItem(nil,1)
#_for i=1,info.ItemsNumber do
#_  local item = panel.GetPanelItem(nil,1,i)
#_  if item.LastWriteTime > curItem.LastWriteTime then
#_    panel.SetSelection(nil,1,i,true)
#_  end
#_end
#_panel.RedrawPanel(nil,1)
#_```
#_
#_```
#_-- Выделить в активной панели все файлы/папки новее текущего,
#_-- используя API макросов (LuaFAR + LuaMacro).
#_
#_d = Panel.Item(0,0,17)
#_for i=1,APanel.ItemCount do
#_  if Panel.Item(0,i,17) > d then
#_    Panel.Select(0,1,1,i)
#_  end
#_end
#_```
#_
#_
</article>
</node>
